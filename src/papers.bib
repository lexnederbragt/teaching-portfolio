@article{biggs2012What,
  title = {What the Student Does: Teaching for Enhanced Learning},
  author = {John Biggs},
  year = {2012},
  journal = {Higher Education Research \& Development},
  publisher = {{Routledge}},
  volume = {31},
  number = {1},
  pages = {39--55},
  doi = {10.1080/07294360.2012.642839},
  abstract = {Many teachers see major difficulties in maintaining academic standards in today's larger and more diversified classes. The problem becomes more tractable if learning outcomes are seen as more a function of students' activities than of their fixed characteristics. The teacher's job is then to organise the teaching/learning context so that all students are more likely to use the higher order learning processes which ``academic'' students use spontaneously. This may be achieved when all components are aligned, so that objectives express the kinds of understanding that we want from students, the teaching context encourages students to undertake the learning activities likely to achieve those understandings, and the assessment tasks tell students what activities are required of them, and tell us how well the objectives have been met. Two examples of aligned teaching systems are described: problem-based learning and the learning portfolio.},
  annotation = {\_eprint: https://doi.org/10.1080/07294360.2012.642839},
  issn = {0729-4360},
  month = {feb},
  shorttitle = {What the Student Does},
}

@article{crouch2001Peer,
  title = {Peer {{Instruction}}: {{Ten}} Years of Experience and Results},
  author = {Catherine H. Crouch and Eric Mazur},
  year = {2001},
  journal = {American Journal of Physics},
  volume = {69},
  number = {9},
  pages = {970--977},
  doi = {10.1119/1.1374249},
  issn = {0002-9505},
  month = {aug},
  shorttitle = {Peer {{Instruction}}},
}

@article{eliassen2021Motivasjon,
  title = {Motivasjon for Beregningsorientert Biologi Og Sammenhengen Med Matematikk {{R2}} Fra Videreg\aa Ende Oppl\ae Ring},
  author = {June Edvarda Eliassen and Maria V. B{\o}e and Lex Nederbragt and Tone F. Gregers},
  year = {2021},
  journal = {Nordic Journal of STEM Education},
  volume = {5},
  number = {1},
  doi = {10.5324/njsteme.v5i1.3917},
  abstract = {Programmering og modellering har i de senere \aa r blitt innf\o rt i h\o yere utdanning og be innf\o rt i skolen med fagfornyelsen fra h\o sten 2020. Det har skapt behov for mer kunnskap om motivasjon og l\ae ring i emner som integrerer programmering som et nytt element i ellers veletablerte fagdisipliner. Denne studien unders\o kte motivasjon for beregningsorientering (programmering og modellering) ved studieprogrammet biovitenskap ved Universitetet i Oslo. Sp\o rreunders\o kelser basert p\aa{} Eccles' forventning-verdi-modell ble gjennomf\o rt ved semesterstart og -slutt i to p\aa f\o lgende \aa r, f\o r og etter innf\o ring av krav om matematikk R2 (R2-kravet). Motivasjonsvariabler ble validert ved faktoranalyse og unders\o kelse av indre konsistens. Resultatene viste at studentene hadde lavere mestringsforventning og interesse for et emne som integrerer programmering i biologi enn for studieprogrammet generelt. Nytteverdien var den sterkeste motiverende faktoren for emnet. Studenter med matematikk R2 hadde st\o rre mestringsforventning til emnet enn de som ikke hadde denne fordypningen, og opplevde mindre utfordring med matematikk og programmering i emnet. Samtidig opplevde disse studentene st\o rre utfordring med biologien i emnet, og det viste seg at studenter med full fordypning i matematikk R2 i mindre grad enn studenter uten R2 hadde full fordypning i biologi fra videreg\aa ende oppl\ae ring. Resultatene dr\o ftes i lys av motivasjonsteori med tanke p\aa{} implikasjoner for undervisning, inntakskrav og videre forskning.},
  issn = {2535-4574},
  month = {feb},
}

@article{gregers2019Lektorstudenter,
  title = {{Lektorstudenter Utvikler Unik Kompetanse Og Bidrar Til \o Kt Kvalitet P\aa{} Begynneremner Gjennom En Undervisningsrettet Master}},
  author = {Tone F. Gregers and Lex Nederbragt},
  year = {2019},
  journal = {Nordic Journal of STEM education},
  volume = {3},
  number = {1},
  pages = {23--27},
  doi = {10.5324/njsteme.v3i1.2992},
  abstract = {Gjennom Fagfornyelsen innf\o res programmering i alle fag med s\ae rlig vekt p\aa{} programmering i naturfag og matematikk fra 2020. L\ae rere som skal undervise etter de nye l\ae replanene vil derfor m\o te p\aa{} nye og hittil ukjente utfordringer knyttet til at alle elever skal l\ae re programmering, og ikke bare de spesielt interesserte elevene som velger programmering som programfag. Det finnes sv\ae rt lite forskningslitteratur knyttet til kunnskap om hvilke utfordringer eller holdninger elever har i m\o te med programmering i fagene. Institutt for biovitenskap (IBV) ved Universitetet i Oslo startet h\o sten 2017 et nytt bachelor studieprogram der programmering er integrert i hele studiel\o pet. F\o rste semester m\o ter studentene et grunnemne som gir en innf\o ring i \aa{} lage og eksperimentere med enkle modeller av biologiske systemer. Men heller ikke her har vi noe forskningsbasert kunnskap om hvordan biologistudenter stiller seg til programmering i biologi og enda mindre hvilke l\ae ringsstrategier de bruker for \aa{} l\o se biologiske problemstillinger med programmering. Ved \aa{} tilby lektorstudenter en undervisningsrettet master der de unders\o ker holdninger til og l\ae ringsstrategier i begynneremnet i programmering vil vi oppn\aa{} to ting. For det f\o rste f\aa r lektorstudentene unik kunnskap om studenters utfordringer og holdninger til programmering som de kan overf\o re til sin egen hverdag som l\ae rere. For det andre f\aa r IBV kunnskap om hvordan vi kan utvikle emnet samt hvordan vi kan legge til rette for l\ae ring og motivasjon i emnet. To lektorstudenter ferdigstiller v\aa ren 2019 undervisningsrettede mastere ved IBV. Studentenes prelimin\ae re data samt deres egenvurdering av utbytte med en slik master er diskutert i dette arbeidet.},
  annotation = {MNT-konferansen 2019, 28.-29. mars, Troms\o},
  language = {Norwegian},
}

@article{miller1956magical,
  title = {The Magical Number Seven, Plus Or Minus Two: Some Limits on Our Capacity for Processing Information.},
  author = {George A. Miller},
  year = {1956},
  journal = {Psychological Review},
  publisher = {{American Psychological Association}},
  volume = {63},
  number = {2},
  pages = {81--97},
  doi = {10.1037/h0043158},
  abstract = {A variety of researches are examined from the standpoint of information theory. It is shown that the unaided observer is severely limited in terms of the amount of information he can receive, process, and remember. However, it is shown that by the use of various techniques, e.g., use of several stimulus dimensions, recoding, and various mnemonic devices, this informational bottleneck can be broken. 20 references. (PsycINFO Database Record (c) 2016 APA, all rights reserved)},
  address = {{US}},
  issn = {1939-1471(Electronic),0033-295X(Print)},
  keywords = {*Cognitive Processes,Information Theory},
}

@article{nederbragt2020Ten,
  title = {Ten Quick Tips for Teaching With Participatory Live Coding},
  author = {Alexander Nederbragt and Rayna Michelle Harris and Alison Presmanes Hill and Greg Wilson},
  year = {2020},
  journal = {PLOS Computational Biology},
  publisher = {{Public Library of Science}},
  volume = {16},
  number = {9},
  pages = {e1008090},
  doi = {10.1371/journal.pcbi.1008090},
  issn = {1553-7358},
  keywords = {Computer software,Eyes,Human learning,Instructors,Learning,Personal computers,Textbooks,Workshops},
  language = {en},
  month = {sep},
}

@article{robins2003Learning,
  title = {Learning and {{Teaching Programming}}: {{A Review}} and {{Discussion}}},
  author = {Anthony Robins and Janet Rountree and Nathan Rountree},
  year = {2003},
  journal = {Computer Science Education},
  volume = {13},
  number = {2},
  pages = {137--172},
  doi = {10.1076/csed.13.2.137.14200},
  abstract = {In this paper we review the literature relating to the psychological/educational study of programming. We identify general trends comparing novice and expert programmers, programming knowledge and strategies, program generation and comprehension, and object-oriented versus procedural programming. (We do not cover research relating specifically to other programming styles.) The main focus of the review is on novice programming and topics relating to novice teaching and learning. Various problems experienced by novices are identified, including issues relating to basic program design, to algorithmic complexity in certain language features, to the ``fragility'' of novice knowledge, and so on. We summarise this material and suggest some practical implications for teachers. We suggest that a key issue that emerges is the distinction between effective and ineffective novices. What characterises effective novices? Is it possible to identify the specific deficits of ineffective novices and help them to become effective learners of programming?},
  issn = {0899-3408},
  month = {jun},
  shorttitle = {Learning and {{Teaching Programming}}},
}

@article{sweller2019Cognitive,
  title = {Cognitive {{Architecture}} and {{Instructional Design}}: 20~{{Years Later}}},
  author = {John Sweller and Jeroen J. G. {van Merri{\"e}nboer} and Fred Paas},
  year = {2019},
  journal = {Educational Psychology Review},
  doi = {10.1007/s10648-019-09465-5},
  abstract = {Cognitive load theory was introduced in the 1980s as an instructional design theory based on several uncontroversial aspects of human cognitive architecture. Our knowledge of many of the characteristics of working memory, long-term memory and the relations between them had been well-established for many decades prior to the introduction of the theory. Curiously, this knowledge had had a limited impact on the field of instructional design with most instructional design recommendations proceeding as though working memory and long-term memory did not exist. In contrast, cognitive load theory emphasised that all novel information first is processed by a capacity and duration limited working memory and then stored in an unlimited long-term memory for later use. Once information is stored in long-term memory, the capacity and duration limits of working memory disappear transforming our ability to function. By the late 1990s, sufficient data had been collected using the theory to warrant an extended analysis resulting in the publication of Sweller et al. (Educational Psychology Review, 10, 251\textendash 296, 1998). Extensive further theoretical and empirical work have been carried out since that time and this paper is an attempt to summarise the last 20 years of cognitive load theory and to sketch directions for future research.},
  issn = {1573-336X},
  keywords = {Cognitive load theory,Instructional advances,Theoretical developments},
  language = {en},
  month = {jan},
  shorttitle = {Cognitive {{Architecture}} and {{Instructional Design}}},
}

@book{biggs2011Teaching,
  title = {Teaching for Quality Learning at University: What the Student Does},
  author = {John B. Biggs and Catherine So-kum Tang},
  year = {2011},
  publisher = {{McGraw-Hill/Society for Research into Higher Education ; Open University Press}},
  abstract = {This best-selling book explains the concept of constructive alignment in education and aids implementation of this in teaching practice.},
  address = {{Philadelphia, Pa.]; Maidenhead, Berkshire, England; New York}},
  annotation = {OCLC: 779842628},
  isbn = {978-0-335-24276-4},
  language = {English},
  shorttitle = {Teaching for Quality Learning at University},
}

@book{fisher2013Better,
  title = {Better {{Learning Through Structured Teaching}}: {{A Framework}} for the {{Gradual Release}} of {{Responsibility}}},
  author = {Douglas Fisher and Nancy Frey},
  year = {2013},
  publisher = {{ASCD}},
  abstract = {In this updated 2nd edition of the ASCD best-seller, Douglas Fisher and Nancy Frey dig deeper into the hows and whys of the gradual release of responsibility instructional framework. To gradually release responsibility is to equip students with what they need to be engaged and self-directed learners. On a day-to-day level, it means delivering lessons purposefully planned to incorporate four essential and interrelated instructional phases: 1. Focused Instruction: Preparing students for learning by establishing lesson purpose, modeling strategies and skills, thinking aloud, and noticing how students respond. 2. Guided Instruction: Strategically using prompts, cues, and questions to lead students to new understanding. 3. Collaborative Learning: Allowing students to consolidate their understanding through exploration, problem-solving, discussion, and thinking with their peers. 4. Independent Learning: Requiring students to use the skills and knowledge they've acquired to create authentic products and ask new questions. The authors explore each phase, using real-life examples from a variety of disciplines. You'll find tips and tools for classroom implementation, including checklists for planning and assessment; advice on feedback, homework, group work, differentiated instruction, and blended learning; answers to frequently asked questions; and examples that align to Common Core State Standards. No matter what grade level or subject you teach, Better Learning Through Structured Teaching is your essential guide to helping students expand their capacity for successful and long-lasting learning.},
  googlebooks = {0BFRBAAAQBAJ},
  isbn = {978-1-4166-1830-0},
  keywords = {Education / General},
  language = {en},
  month = {dec},
  shorttitle = {Better {{Learning Through Structured Teaching}}},
}

@book{guzdial2015LearnerCentered,
  title = {Learner-{{Centered Design}} of {{Computing Education}}: {{Research}} on {{Computing}} for {{Everyone}}},
  author = {Mark Guzdial},
  year = {2015},
  publisher = {{Morgan \& Claypool}},
  isbn = {978-1-62705-351-8},
  month = {nov},
  shorttitle = {Learner-{{Centered Design}} of {{Computing Education}}},
}

@book{mazur1997Peer,
  title = {Peer Instruction: a User's Manual},
  author = {Eric Mazur},
  year = {1997},
  publisher = {{Prentice Hall}},
  abstract = {Mazur shows teachers how to teach students of physics that they can understand memorization as a different alternative to mathematics. He describes interactive teaching, including different types of lecturing and group study, as a method of teaching physics.},
  address = {{Upper Saddle River, N.J.}},
  annotation = {OCLC: 34788471},
  isbn = {978-0-13-565441-5},
  language = {English},
  shorttitle = {Peer Instruction},
}

@inproceedings{caspersen2007Instructional,
  title = {Instructional {{Design}} of a {{Programming Course}}: {{A Learning Theoretic Approach}}},
  author = {Michael E. Caspersen and Jens Bennedsen},
  year = {2007},
  booktitle = {Proceedings of the {{Third International Workshop}} on {{Computing Education Research}}},
  publisher = {{ACM}},
  pages = {111--122},
  doi = {10.1145/1288580.1288595},
  abstract = {We present a brief overview of a model for the human cognitive architecture and three learning theories based on this model: cognitive load theory, cognitive apprenticeship, and worked examples (a key area of cognitive skill acquisition). Based on this brief overview we argue how an introductory object-oriented programming course is designed according to results of cognitive science and educational psychology in general and cognitive load theory and cognitive skill acquisition in particular; the principal techniques applied are: worked examples, scaffolding, faded guidance, cognitive apprenticeship, and emphasis of patterns to aid schema creation and improve learning. As part of the presentation of the course, we provide a characterization of model-driven programming---the approach we have adopted in the introductory programming course. The result is an introductory programming course emphasizing a pattern-based approach to programming and schema acquisition in order to improve learning.},
  address = {{New York, NY, USA}},
  isbn = {978-1-59593-841-1},
  keywords = {cognition,cognitive apprenticeship,cognitive load theory,instructional design,learning,model-driven programming,object-oriented programming,patternbased approach to programming education,worked examples},
  series = {{{ICER}} '07},
  shorttitle = {Instructional {{Design}} of a {{Programming Course}}},
}

@inproceedings{jenkins2002difficulty,
  title = {On the Difficulty of Learning to Program},
  author = {Tony Jenkins},
  year = {2002},
  booktitle = {Proceedings for the 3rd {{Annual}} Conference of the {{LTSN Centre}} for {{Information}} and {{Computer Sciences}}},
  publisher = {{Loughborough University}},
  pages = {53--58},
  abstract = {Few students find learning to program easy. This paper considers why this is so by examining what makes this most basic of skills so difficult to acquire. There are many factors at work. Some are simply inherent in the subject while others have more to do with the modus operandi of teaching departments. Others are deeply interlinked with the expectations, attitudes, and previous experiences of the teaching staff and their students. If computing educators are ever to truly develop a learning environment where all the students learn to program quickly and well, it is vital that an understanding of the difficulties and complexities faced by the students is developed. At the moment the way in which programming is taught and learned is fundamentally broken.},
}

@inproceedings{luxton-reilly2016Learning,
  title = {Learning to {{Program}} Is {{Easy}}},
  author = {Andrew {Luxton-Reilly}},
  year = {2016},
  booktitle = {Proceedings of the 2016 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  publisher = {{ACM}},
  pages = {284--289},
  doi = {10.1145/2899415.2899432},
  abstract = {The orthodox view that "programming is difficult to learn" leads to uncritical teaching practices and poor student outcomes. It may also impact negatively on diversity and equity within the Computer Science discipline. But learning to program is easy --- so easy that children can do it. We make our introductory courses difficult by establishing unrealistic expectations for novice programming students. By revisiting the expected norms for introductory programming we may be able to substantially improve outcomes for novice programmers, address negative impressions of disciplinary practices and create a more equitable environment.},
  address = {{New York, NY, USA}},
  isbn = {978-1-4503-4231-5},
  keywords = {computer science education,cs1,curriculum,expectations,learning outcomes,novice,programming,standards},
  series = {{{ITiCSE}} '16},
}

@None{haland2019Programmering,
  title = {{Programmering I Biovitenskapelige Problemstillinger}},
  author = {Lars Erik Revheim H{\aa}land},
  year = {2019},
  abstract = {Programmering f\aa r en stadig sterkere rolle i de ulike realfagene. Dette ser vi gjennom fagfornyelsen i norsk grunn- og videreg\aa ende skole, og p\aa{} behovet i n\ae ringslivet. Universitetet i Oslo er blant de f\o rste i Norge til \aa{} innf\o re programmering som en obligatorisk del av realfagene. Siden realfaglig programmering er s\aa, er det behov for forskning p\aa{} dette feltet. I min studie har jeg fors\o kt \aa{} kartlegge hvordan biologistudenter arbeider med programmeringsoppgaver. Informantene i denne studien har v\ae rt tre grupper med studenter som tar emnet \guillemotleft Innf\o ring i beregningsorienterte modeller i biovitenskap\guillemotright{} (BIOS1100), et obligatorisk emne for alle studenter som studerer biovitenskap ved UiO. Studien har blitt gjennomf\o rt ved \aa{} bruke en kombinasjon av fokusgruppeintervju og observasjon av gruppearbeid. I tillegg har jeg anvendt et sp\o rsm\aa l i et sp\o rreskjema som ble gitt ut til alle studentene ved BIOS1100. Funnene fra denne studien viser at studentene m\o ter en rekke utfordringer n\aa r de programmerer i biovitenskapelige emner. Utfordringene er i stor grad knyttet til \aa{} lage store programmer, forst\aa{} hva som skal programmerers, bruke ulike programstrukturer og anvende matematikk. Jeg argumenterer for at mange av disse utfordringene er en konsekvens av manglende strategisk kunnskap hos studentene. I hovedsak viser studentene til to typer strategier n\aa r de programmerer; 1) bruk av eksempelprogrammer, 2) pr\o ving og feiling. Videre ser vi at biovitenskapelige problemstillinger har liten p\aa virkning p\aa{} arbeidet med \aa{} skrive programmer, men at det b\aa de kan ha positiv og negativ effekt p\aa{} studentenes ferdigheter/l\ae ring til \aa{} l\o se programmeringsoppgaver. Samtidig virker studentene \aa{} ha st\o rre interesse for programmering n\aa r de f\aa r arbeide med biovitenskapelige problemstillinger. Til slutt ser vi at studentene for det meste programmerer i grupper og at dette kan ha b\aa de positive og negative f\o lger for studentenes l\ae ring av programmering. I denne studien argumenterer jeg for at probleml\o sning b\o r vektlegges i programmeringskurs. Her kan \guillemotleft Computational thinking\guillemotright{} v\ae re en nyttig probleml\o sningsstrategi for \aa{} l\ae re studentene hvordan de bedre og mer effektivt l\o ser programmeringsoppgaver.},
  annotation = {Accepted: 2019-09-23T23:46:36Z},
  language = {nob},
  school = {University of Oslo},
  thesistype = {phd},
}

@misc{achterberg2017Software,
  title = {Software {{Carpentry}}: {{Programming}} With {{Python}}},
  author = {Hakim Achterberg and James Adams and Joshua Adelman and James Allen and Jorge Aranda and Sung Bae and Piotr Banaszkiewicz and Pauline Barmby and Ewan Barr and David Beitey and Trevor Bekolay and Jared Berghold and Marius Bj{\o}rnstad and John Blischak and Maxime Boissonneault and Corinne Bosley and Azalee Bostroem and Andy Boughton and Ry4an Brase and Amy Brown and Kyler Brown and Abigail Cabunoc Mayes and Ian Carroll and John Chase and Stephen Childs and Jin Choi and Richard Clare and Sarah Clayton and Peter Cock and Michael Connell and Marianne Corvellec and Thomas Coudrat and Ryan Dale and Matt Davis and Neal Davis and Andrew Davison and Raffaella Demichelis and Gabriel A. Devenyi and Emily Dolson and David Dotson and Laurent Duchesne and Jonah Duckles and R{\'e}mi Emonet and K. Arthur Endsley and Nicolas Fauchereau and Talitha Ford and Konrad F{\"o}rstner and Ivan Gonzalez and Jan Gosmann and John Gosset and Jeremy Gray and Bastian Greshake and St{\'e}phane Guillou and Mary Haley and Sam Hames and Jessica B. Hamrick and Eilis Hannon and Michael Hansen and Kate Hertweck and Konrad Hinsen and Johan Hjelm and Toby Hodges and Derek Howard and Damien Irving and Mike Jackson and Ben Jolly and Nick Jones and Blake Joyce and David Ketcheson and W. Trevor King and Sigrid Klerke and Lauren Ko and Andy Kwong and Benjamin Laken and Hilmar Lapp and Doug Latornell and John R. Leeman and Jean-Christophe Leyder and Willem Ligtenberg and Johnny Lin and Andrew Lonsdale and Alexandre Manhaes Savio and Ryan May and Dan Mazur and Fran{\c c}ois Michonneau and Bill Mills and Zakariyya Mughal and Lex Nederbragt and Ryan Neufeld and Aaron O'Leary and Adam Obeng and Jeramia Ory and Natalia Osiecka and Jon Pipitone and Adrianna Pi{\'n}ska and Timoth{\'e}e Poisot and Pawel Pomorski and Narayanan Raghupathy and Florian Rathgeber and Meredith Rawls and Adam {Richie-Halford} and Janet Riley and Thomas Robitaille and Ariel Rokem and Marjorie Roswell and Mahdi Sadjadi and Elliott {Sales de Andrade} and Sebastian Schmeier and Leigh Sheneman and Arron Shiffer and Ardita Shkurti and Raniere Silva and Nicola Soranzo and Erik Spence and Ashwin Srinath and Valentina Staneva and Jim Stapleton and Brian Stucky and Cody Taylor and Tracy Teal and Bartosz Telenczuk and Ian Thomas and Brian Thorne and Giovanni Torres and Tim Tr{\"o}ndle and Jessica Upani and Olav Vahtras and Edwin {van der Helm} and Alistair Walsh and Nathan Walter and Derek Weitzel and Daniel Wheeler and Ethan White and Evan P. Williamson and Frank Willmore and Aidan Wilson and Greg Wilson and Xiao Xiao and Andrea Zonca},
  year = {2017},
  doi = {10.5281/zenodo.278222},
  abstract = {A full-day introduction to programming with Python for researchers, developed and maintained by the Software Carpentry team.},
  month = {feb},
  shorttitle = {Software {{Carpentry}}},
}

@misc{ahmadia2017Softwarea,
  title = {Software {{Carpentry}}: {{Version Control}} With {{Git}}},
  author = {Aron Ahmadia and James Allen and Alison Appling and Sean Aubin and Pete Bachant and Daniel Baird and Piotr Banaszkiewicz and Pauline Barmby and B{\'e}r{\'e}nice Batut and Trevor Bekolay and Maxim Belkin and John Blischak and Madeleine Bonsma and Jon Borrelli and Andy Boughton and Daina Bouquin and Rudi Brauning and Matthew Brett and Amy Brown and Abigail Cabunoc Mayes and Jane Charlesworth and Billy Charlton and Daniel Chen and Garret Christensen and Ruth Collings and Marianne Corvellec and Matt Davis and Gabriel A. Devenyi and Emily Dolson and Laurent Duchesne and Jonah Duckles and R{\'e}mi Emonet and Lo{\"i}c Est{\`e}ve and Emmanouil Farsarakis and Bennet Fauber and Anne Fouilloux and Konrad F{\"o}rstner and Stuart Geiger and Ivan Gonzalez and Marisa Guarinello and St{\'e}phane Guillou and Jamie Hadwin and Matthias Haeni and Pierre Haessig and Nicholas Hannah and Michael Hansen and Sumana Harihareswara and Alois Heilmaier and Martin Heroux and Kate Hertweck and Andreas Hilboll and Konrad Hinsen and Daisie Huang and Yuandra Ismiraldi and Mike Jackson and Christian Jacobs and Dorota Jarecka and Luke W. Johnston and David Jones and Zbigniew {J{\k{e}}drzejewski-Szmek} and Tom Kelly and W. Trevor King and Thomas Kluyver and Bernhard Konrad and Mateusz Kuzak and Arne K{\"u}derle and Kathleen Labrie and Hilmar Lapp and Doug Latornell and Mark Laufersweiler and David LeBauer and Kate Lee and Matthias Liffers and Clara Llebot and Catrina Loucks and Keith Ma and Kunal Marwaha and Ryan May and Fran{\c c}ois Michonneau and Bill Mills and Andreas Mueller and Madicken Munk and VP Nagraj and Lex Nederbragt and Juan {Nunez-Iglesias} and Brenna O'Brien and Aaron O'Leary and Catherine Olsson and Michael Panitz and Chris Pawsey and Stefan Pfenninger and Jon Pipitone and Timoth{\'e}e Poisot and Paul Preney and Timothy Rice and Kristina Riemer and David Rio Deiros and Natalie Robinson and Annika Rockenberger and Andrew Rohl and Ariel Rokem and Bill Sacks and Michael Sarahan and Sebastian Schmeier and Hartmut Schmider and Peter Shellito and Patrick C. Shriwise and Raniere Silva and Brendan Smithyman and Nicola Soranzo and Peter Steinbach and Sarah Stevens and Oliver Stueker and Benjamin Stuermer and Tiffany Timbers and Danielle Traphagen and Tim Tr{\"o}ndle and Anelda {van der Walt} and Steve Vandervalk and Greg Watson and Belinda Weaver and Mark Wheelhouse and Ethan White and Evan P. Williamson and Greg Wilson and Steven Wu and Qingpeng Zhang},
  year = {2017},
  doi = {10.5281/zenodo.278219},
  abstract = {A half-day introduction to version control with Git and GitHub for researchers, developed and maintained by the Software Carpentry team.},
  month = {feb},
  shorttitle = {Software {{Carpentry}}},
}

@misc{aldazabalmensa2017Software,
  title = {Software {{Carpentry}}: {{The Unix Shell}}},
  author = {Inigo Aldazabal Mensa and Harriet Alexander and James Allen and Areej {Alsheikh-Hussain} and Dean Attali and Daniel Baird and Asher Baltzell and Piotr Banaszkiewicz and Pauline Barmby and Rob Beagrie and Glen Beane and Andrea Bedini and Trevor Bekolay and Evgenij Belikov and Jason Bell and Brian Bill and Kai Blin and John Blischak and Simon Boardman and Maxime Boissonneault and Jessica Bonnie and Andy Boughton and Ry4an Brase and Amy Brown and Dana Brunson and Jarek Bryk and Orion Buske and Abigail Cabunoc Mayes and Mike Carlise and Daniel Chen and Kally Chung and Kathy Chung and Daniel Deveau and Gabriel A. Devenyi and Phillip Doehle and Emily Dolson and Maria Doyle and Jonah Duckles and R{\'e}mi Emonet and David Eyers and Filipe Fernandes and Hugues Fontenelle and Francis Gacenga and Paul Gardner and Matthew Gidden and Ivan Gonzalez and Norman Gray and St{\'e}phane Guillou and Varda F. Hagh and Michael Hansen and Emelie Harstad and Tom Hohenstein and Adina Howe and Fatma Imamoglu and Damien Irving and Mike Jackson and Emily Jane McTavish and Michael Jennings and Dan Jones and Megan A. Jones and Alix Keener and Kristopher Keipert and Tom Kelly and Jan T. Kim and W. Trevor King and Christina Koch and Bernhard Konrad and Sherry Lake and Dustin Lang and Doug Latornell and Philip Lijnzaad and Eric Ma and Alex Mac and Joshua Madin and Tobin Magle and Mark Mandel and Camille Marini and Kunal Marwaha and Sergey Mashchenko and Daniel McCloy and Fran{\c c}ois Michonneau and Ryan Middleton and Jackie Milhans and Bill Mills and Amanda Miotto and Sarah Mount and Lex Nederbragt and Daiva Nielsen and Danielle Nielsen and Klemens Noga and Aaron O'Leary and Randy Olson and Adam Orr and Nina Overgard Therkildsen and Kirill Palamartchouk and Adam Perry and Matthew Peterson and Jon Pipitone and Timoth{\'e}e Poisot and Hossein Pourreza and Timothy Povall and Adam {Richie-Halford} and Scott Ritchie and Cesar B. Rocha and Noam Ross and Halfdan Rydbeck and Mahdi Sadjadi and Shane Sanders and Pat Schloss and Bertie Seyffert and Genevieve Shattow and Raniere Silva and Sarah Simpkin and John Simpson and Byron Smith and Armin Sobhani and Nicola Soranzo and Ashwin Srinath and Daniel Standage and Meg Staton and Peter Steinbach and Marcel Stimberg and Bartosz Telenczuk and Florian Thoele and Tiffany Timbers and Stephen Turner and Anelda {van der Walt} and Jay {van Schyndel} and David Vollmer and Jens {von der Linden} and Andrew Walker and Josh Waterfall and Greg Watson and Ethan White and Evan P. Williamson and Carol Willing and Greg Wilson and Donny Winston and Holger Wolff and Lynn Young and Lee Zamparo},
  year = {2017},
  doi = {10.5281/zenodo.278226},
  abstract = {A half-day introduction to automating tasks with the Unix shell for researchers, developed and maintained by the Software Carpentry team.},
  month = {feb},
  shorttitle = {Software {{Carpentry}}},
}

@misc{allen2017Software,
  title = {Software {{Carpentry}}: {{Automation}} and {{Make}}},
  author = {James Allen and Pete Bachant and Piotr Banaszkiewicz and Trevor Bekolay and John Blischak and Maxime Boissonneault and Andy Boughton and Abigail Cabunoc Mayes and Gerard Capes and Gabriel A. Devenyi and Deborah Digges and Jonah Duckles and R{\'e}mi Emonet and Andrew Fraser and Michael Hansen and Kate Hertweck and Luiz Irber and Mike Jackson and W. Trevor King and Gang Liu and Fran{\c c}ois Michonneau and Bill Mills and Lex Nederbragt and Aaron O'Leary and Jon Pipitone and Timoth{\'e}e Poisot and Adam {Richie-Halford} and Jason Sherman and Raniere Silva and Byron Smith and Pier-Luc {St-Onge} and Andy Teucher and Evan P. Williamson and Greg Wilson},
  year = {2017},
  doi = {10.5281/zenodo.278220},
  abstract = {A half-day introduction to task automation with Make, developed and maintained by the Software Carpentry team.},
  month = {feb},
  shorttitle = {Software {{Carpentry}}},
}

@misc{erinalisonbecker2019carpentries,
  title = {Carpentries/Instructor-Training: {{The Carpentries Instructor Training June}} 2019},
  author = {Erin Alison Becker and Christina Koch and Karen Word and Rayna Michelle Harris and Maneesha Sane and Lex Nederbragt and Fran{\c c}ois Michonneau and Kari L. Jordan and Amy E. Hodge and Christopher Erdmann and Ariel Rokem and Ted Laderas and Greg Wilson and Ian Lee and Murray Cadzow and Sarah Brown and Toby Hodges and Aleksandra Nenadic and Jonah Duckles and R{\'e}mi Rampin and Tracy Teal and Katrin Leinweber and Paula Andrea Martinez and R{\'e}mi Emonet and Alexander Konovalov and Eric Jankowski and Gerard Capes and Jason Williams and Katherine Koziar and Nicol{\'a}s Palopoli and Noah Spies and Allison Weber and {amoskane} and Anita Sch{\"u}rch and AnnaWilliford and {Brian Ballsun-Stanton} and Jeffrey Oliver and Mik Black and Neil Kindlon and St{\'e}phane Guillou and Yo Yehudi and Alistair John Walsh and Andrew B. Collier and Callin Switzer and Christian Brueffer and Colin Morris and Dan Allan and DanielBrett and Danielle Quinn and Darya Vanichkina and David Jennings and {davidbenncsiro} and Evan Peter Williamson and Jason M. Gates and Joe Atzberger and John Bradley and John Pellman and Jonathan Bradley and Karen Cranston and {Kees den Heijer} and Laurence and {Marie-Helene Burle} and Mike Henry and {naught101} and Neal Davis and Nicholas Tierney and Petraea and Sarah M. Brown and Sarah Stevens and {satya-vinay} and Sean and Serah Anne Njambi Kiburu and Stefan Helfrich and Steve Moss and Tiago M. D. Pereira},
  year = {2019},
  doi = {10.5281/zenodo.3258398},
  abstract = {A two-day introduction to modern evidence-based teaching practices, built and maintained by the Carpentry community.},
  howpublished = {Zenodo},
  month = {jun},
  shorttitle = {Carpentries/Instructor-Training},
}

@misc{wilson2017Data,
  title = {Data {{Carpentry Wrangling Genomics Lesson}}},
  author = {Greg Wilson and Erin Becker and Sheldon McKay and Fran{\c c}ois Michonneau and Jason J. Williams and Abigail Cabunoc Mayes and Raniere Silva and Pete (hoytpr) and Kate Crosby and Lex Nederbragt and {NielInfante} and Fotis E. Psomopoulos and Hadrien Gourl{\'e} and Gaius (gaiusjaugustus) and {dbmarchant} and R{\'e}mi Emonet and Peter Cock and Piotr Banaszkiewicz and Tracy Teal and {HLindsay} and Adam Thomas and Chris Hamm and James Allen and Kari L. Jordan and {EvanWill} and Maxim Belkin and Jon Pipitone and Nick Young and Ming Tang and Dev Paudel and {synesthesiam} and Bill Mills and Gabriel A. Devenyi and Ian Carroll and Trevor W. King and {gtehennepe}},
  year = {2017},
  doi = {10.5281/zenodo.1064254},
  month = {nov},
}
