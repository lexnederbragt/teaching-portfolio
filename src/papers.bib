@article{wilson_good_2017,
  title = {Good Enough Practices in Scientific Computing},
  author = {Greg Wilson and Jennifer Bryan and Karen Cranston and Justin Kitzes and Lex Nederbragt and Tracy K. Teal},
  year = {2017},
  journal = {PLOS Computational Biology},
  volume = {13},
  number = {6},
  pages = {e1005510},
  doi = {10.1371/journal.pcbi.1005510},
  url = {http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005510},
  abstract = {Author summary Computers are now essential in all branches of science, but most researchers are never taught the equivalent of basic lab skills for research computing. As a result, data can get lost, analyses can take much longer than necessary, and researchers are limited in how effectively they can work with software and data. Computing workflows need to follow the same practices as lab projects and notebooks, with organized data, documented steps, and the project structured for reproducibility, but researchers new to computing often don't know where to start. This paper presents a set of good computing practices that every researcher can adopt, regardless of their current level of computational skill. These practices, which encompass data management, programming, collaborating with colleagues, organizing projects, tracking work, and writing manuscripts, are drawn from a wide variety of published sources from our daily lives and from our work with volunteer organizations that have delivered workshops to over 11,000 people since 2010.},
  file = {Full Text PDF:/Users/alexajo/Zotero/storage/764KVKF7/Wilson et al. - 2017 - Good enough practices in scientific computing.pdf:application/pdf;Snapshot:/Users/alexajo/Zotero/storage/CHNZU8NT/article.html:text/html},
  issn = {1553-7358},
  keywords = {Computer software, Control systems, Data management, Data processing, Programming languages, Reproducibility, Software tools, Source code},
  month = {jun},
  urldate = {2017-06-22},
}

@article{biggs_2012,
  title = {What the Student Does: Teaching for Enhanced Learning},
  author = {John Biggs},
  year = {2012},
  journal = {Higher Education Research \& Development},
  publisher = {{Routledge}},
  volume = {31},
  number = {1},
  pages = {39--55},
  doi = {10.1080/07294360.2012.642839},
  abstract = {Many teachers see major difficulties in maintaining academic standards in today's larger and more diversified classes. The problem becomes more tractable if learning outcomes are seen as more a function of students' activities than of their fixed characteristics. The teacher's job is then to organise the teaching/learning context so that all students are more likely to use the higher order learning processes which ``academic'' students use spontaneously. This may be achieved when all components are aligned, so that objectives express the kinds of understanding that we want from students, the teaching context encourages students to undertake the learning activities likely to achieve those understandings, and the assessment tasks tell students what activities are required of them, and tell us how well the objectives have been met. Two examples of aligned teaching systems are described: problem-based learning and the learning portfolio.},
  annotation = {\_eprint: https://doi.org/10.1080/07294360.2012.642839},
  issn = {0729-4360},
  month = {feb},
  shorttitle = {What the Student Does},
}

@article{miller_1956,
  title = {The Magical Number Seven, Plus Or Minus Two: Some Limits on Our Capacity for Processing Information.},
  author = {George A. Miller},
  year = {1956},
  journal = {Psychological Review},
  publisher = {{American Psychological Association}},
  volume = {63},
  number = {2},
  pages = {81--97},
  doi = {10.1037/h0043158},
  abstract = {A variety of researches are examined from the standpoint of information theory. It is shown that the unaided observer is severely limited in terms of the amount of information he can receive, process, and remember. However, it is shown that by the use of various techniques, e.g., use of several stimulus dimensions, recoding, and various mnemonic devices, this informational bottleneck can be broken. 20 references. (PsycINFO Database Record (c) 2016 APA, all rights reserved)},
  address = {{US}},
  issn = {1939-1471(Electronic),0033-295X(Print)},
  keywords = {*Cognitive Processes,Information Theory},
}

@article{nederbragt_et_al_2020,
  title = {Ten Quick Tips for Teaching With Participatory Live Coding},
  author = {Alexander Nederbragt and Rayna Michelle Harris and Alison Presmanes Hill and Greg Wilson},
  year = {2020},
  journal = {PLOS Computational Biology},
  publisher = {{Public Library of Science}},
  volume = {16},
  number = {9},
  pages = {e1008090},
  doi = {10.1371/journal.pcbi.1008090},
  issn = {1553-7358},
  keywords = {Computer software,Eyes,Human learning,Instructors,Learning,Personal computers,Textbooks,Workshops},
  language = {en},
  month = {sep},
}

@article{porter_et_al_2013,
  title = {Success in Introductory Programming: What Works?},
  author = {Leo Porter and Mark Guzdial and Charlie McDowell and Beth Simon},
  year = {2013},
  journal = {Communications of the ACM},
  volume = {56},
  number = {8},
  pages = {34--36},
  doi = {10.1145/2492007.2492020},
  abstract = {How pair programming, peer instruction, and media computation have improved computer science education.},
  issn = {0001-0782},
  month = {aug},
  shorttitle = {Success in Introductory Programming},
}

@article{robins_et_al_2003,
  title = {Learning and {{Teaching Programming}}: {{A Review}} and {{Discussion}}},
  author = {Anthony Robins and Janet Rountree and Nathan Rountree},
  year = {2003},
  journal = {Computer Communications},
  volume = {13},
  number = {2},
  pages = {137--172},
  doi = {10.1076/csed.13.2.137.14200},
  abstract = {In this paper we review the literature relating to the psychological/educational study of programming. We identify general trends comparing novice and expert programmers, programming knowledge and strategies, program generation and comprehension, and object-oriented versus procedural programming. (We do not cover research relating specifically to other programming styles.) The main focus of the review is on novice programming and topics relating to novice teaching and learning. Various problems experienced by novices are identified, including issues relating to basic program design, to algorithmic complexity in certain language features, to the ``fragility'' of novice knowledge, and so on. We summarise this material and suggest some practical implications for teachers. We suggest that a key issue that emerges is the distinction between effective and ineffective novices. What characterises effective novices? Is it possible to identify the specific deficits of ineffective novices and help them to become effective learners of programming?},
  issn = {0899-3408},
  month = {jun},
  shorttitle = {Learning and {{Teaching Programming}}},
}

@article{sweller_et_al_2019,
  title = {Cognitive {{Architecture}} and {{Instructional Design}}: 20~{{Years Later}}},
  author = {John Sweller and Jeroen J. G. van Merri{\"e}nboer and Fred Paas},
  year = {2019},
  journal = {Educational Psychology Review},
  doi = {10.1007/s10648-019-09465-5},
  abstract = {Cognitive load theory was introduced in the 1980s as an instructional design theory based on several uncontroversial aspects of human cognitive architecture. Our knowledge of many of the characteristics of working memory, long-term memory and the relations between them had been well-established for many decades prior to the introduction of the theory. Curiously, this knowledge had had a limited impact on the field of instructional design with most instructional design recommendations proceeding as though working memory and long-term memory did not exist. In contrast, cognitive load theory emphasised that all novel information first is processed by a capacity and duration limited working memory and then stored in an unlimited long-term memory for later use. Once information is stored in long-term memory, the capacity and duration limits of working memory disappear transforming our ability to function. By the late 1990s, sufficient data had been collected using the theory to warrant an extended analysis resulting in the publication of Sweller et al. (Educational Psychology Review, 10, 251\textendash 296, 1998). Extensive further theoretical and empirical work have been carried out since that time and this paper is an attempt to summarise the last 20 years of cognitive load theory and to sketch directions for future research.},
  issn = {1573-336X},
  keywords = {Cognitive load theory,Instructional advances,Theoretical developments},
  language = {en},
  month = {jan},
  shorttitle = {Cognitive {{Architecture}} and {{Instructional Design}}},
}

@book{biggs_et_al_2011,
  title = {Teaching for Quality Learning at University: What the Student Does},
  author = {John B. Biggs and Catherine So-kum Tang},
  year = {2011},
  publisher = {{McGraw-Hill/Society for Research into Higher Education ; Open University Press}},
  abstract = {This best-selling book explains the concept of constructive alignment in education and aids implementation of this in teaching practice.},
  address = {{Philadelphia, Pa.]; Maidenhead, Berkshire, England; New York}},
  annotation = {OCLC: 779842628},
  isbn = {978-0-335-24276-4},
  language = {English},
  shorttitle = {Teaching for Quality Learning at University},
}

@book{fisher_Frey_2013,
  title = {Better {{Learning Through Structured Teaching}}: {{A Framework}} for the {{Gradual Release}} of {{Responsibility}}},
  author = {Douglas Fisher and Nancy Frey},
  year = {2013},
  publisher = {{ASCD}},
  abstract = {In this updated 2nd edition of the ASCD best-seller, Douglas Fisher and Nancy Frey dig deeper into the hows and whys of the gradual release of responsibility instructional framework. To gradually release responsibility is to equip students with what they need to be engaged and self-directed learners. On a day-to-day level, it means delivering lessons purposefully planned to incorporate four essential and interrelated instructional phases: 1. Focused Instruction: Preparing students for learning by establishing lesson purpose, modeling strategies and skills, thinking aloud, and noticing how students respond. 2. Guided Instruction: Strategically using prompts, cues, and questions to lead students to new understanding. 3. Collaborative Learning: Allowing students to consolidate their understanding through exploration, problem-solving, discussion, and thinking with their peers. 4. Independent Learning: Requiring students to use the skills and knowledge they've acquired to create authentic products and ask new questions. The authors explore each phase, using real-life examples from a variety of disciplines. You'll find tips and tools for classroom implementation, including checklists for planning and assessment; advice on feedback, homework, group work, differentiated instruction, and blended learning; answers to frequently asked questions; and examples that align to Common Core State Standards. No matter what grade level or subject you teach, Better Learning Through Structured Teaching is your essential guide to helping students expand their capacity for successful and long-lasting learning.},
  googlebooks = {0BFRBAAAQBAJ},
  isbn = {978-1-4166-1830-0},
  keywords = {Education / General},
  language = {en},
  month = {dec},
  shorttitle = {Better {{Learning Through Structured Teaching}}},
}

@book{mazur_1997,
  title = {Peer Instruction: a User's Manual},
  author = {Eric Mazur},
  year = {1997},
  publisher = {{Prentice Hall}},
  abstract = {Mazur shows teachers how to teach students of physics that they can understand memorization as a different alternative to mathematics. He describes interactive teaching, including different types of lecturing and group study, as a method of teaching physics.},
  address = {{Upper Saddle River, N.J.}},
  annotation = {OCLC: 34788471},
  isbn = {978-0-13-565441-5},
  language = {English},
  shorttitle = {Peer Instruction},
}

@book{guzdial_2015,
  title = {Learner-{{Centered Design}} of {{Computing Education}}: {{Research}} on {{Computing}} for {{Everyone}}},
  author = {Mark Guzdial},
  year = {2015},
  publisher = {{Morgan \& Claypool}},
  isbn = {978-1-62705-351-8},
  month = {nov},
  shorttitle = {Learner-{{Centered Design}} of {{Computing Education}}},
}

@book{wilson_20189,
  title = {Teaching Tech Together: How to Make Your Lessons Work and Build a Teaching Community Around Them},
  author = {Wilson and Greg},
  year = {2019},
  publisher = {Routledge \& CRC Press},
  abstract = {Hundreds of grassroots groups have sprung up around the world to teach programming, web design, robotics, and other skills outside traditional classrooms. These groups exist so that people don't have to learn these things on their own, but ironically, their founders and instructors are often teaching themselves how to teach. There's a better way. This book presents evidence-based practices that will help you create and deliver lessons that work and build a teaching community around them. Topics include the differences between different kinds of learners, diagnosing and correcting misunderstandings, teaching as a performance art, what motivates and demotivates adult learners, how to be a good ally, fostering a healthy community, getting the word out, and building alliances with like-minded groups. The book includes over a hundred exercises that can be done individually or in groups, over 350 references, and a glossary to help you navigate educational jargon.},
  isbn = {9780367352974},
  language = {English},
  shorttitle = {Teaching Tech Together},
}

@inproceedings{porter_et_al_2016,
  title = {A {{Multi}}-Institutional {{Study}} of {{Peer Instruction}} in {{Introductory Computing}}},
  author = {Leo Porter and Dennis Bouvier and Quintin Cutts and Scott Grissom and Cynthia Lee and Robert McCartney and Daniel Zingaro and Beth Simon},
  year = {2016},
  booktitle = {Proceedings of the 47th {{ACM Technical Symposium}} on {{Computing Science Education}}},
  publisher = {{Association for Computing Machinery}},
  pages = {358--363},
  doi = {10.1145/2839509.2844642},
  abstract = {Peer Instruction (PI) is a student-centric pedagogy in which students move from the role of passive listeners to active participants in the classroom. Over the past five years, there have been a number of research articles regarding the value of PI in computer science. The present work adds to this body of knowledge by examining outcomes from seven introductory programming instructors: three novices to PI and four with a range of PI experience. Through common measurements of student perceptions, we provide evidence that introductory computing instructors can successfully implement PI in their classrooms. We find encouraging minimum (74\%) and average (92\%) levels of success as measured through student valuation of PI for their learning. This work also documents and hypothesizes reasons for comparatively poor survey results in one course, highlighting the importance of the choice of grading policy (participation vs. correctness) for new PI adopters.},
  address = {{New York, NY, USA}},
  isbn = {978-1-4503-3685-7},
  keywords = {clickers,faculty adoption,peer instruction},
  month = {feb},
  series = {{{SIGCSE}} '16},
}

@inproceedings{jenkins_2002,
  title = {On the Difficulty of Learning to Program},
  author = {Tony Jenkins},
  year = {2002},
  booktitle = {Proceedings for the 3rd {{Annual}} Conference of the {{LTSN Centre}} for {{Information}} and {{Computer Sciences}}},
  publisher = {{Loughborough University}},
  pages = {53--58},
  abstract = {Few students find learning to program easy. This paper considers why this is so by examining what makes this most basic of skills so difficult to acquire. There are many factors at work. Some are simply inherent in the subject while others have more to do with the modus operandi of teaching departments. Others are deeply interlinked with the expectations, attitudes, and previous experiences of the teaching staff and their students. If computing educators are ever to truly develop a learning environment where all the students learn to program quickly and well, it is vital that an understanding of the difficulties and complexities faced by the students is developed. At the moment the way in which programming is taught and learned is fundamentally broken.},
}

@inproceedings{luxton_reilly_2016,
  title = {Learning to {{Program}} Is {{Easy}}},
  author = {Andrew {Luxton-Reilly}},
  year = {2016},
  booktitle = {Proceedings of the 2016 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  publisher = {{ACM}},
  pages = {284--289},
  doi = {10.1145/2899415.2899432},
  abstract = {The orthodox view that "programming is difficult to learn" leads to uncritical teaching practices and poor student outcomes. It may also impact negatively on diversity and equity within the Computer Science discipline. But learning to program is easy --- so easy that children can do it. We make our introductory courses difficult by establishing unrealistic expectations for novice programming students. By revisiting the expected norms for introductory programming we may be able to substantially improve outcomes for novice programmers, address negative impressions of disciplinary practices and create a more equitable environment.},
  address = {{New York, NY, USA}},
  isbn = {978-1-4503-4231-5},
  keywords = {computer science education,cs1,curriculum,expectations,learning outcomes,novice,programming,standards},
  series = {{{ITiCSE}} '16},
}

@None{haaland_2019,
  title = {{Programmering I Biovitenskapelige Problemstillinger}},
  author = {Lars Erik Revheim H{\aa}land},
  year = {2019},
  abstract = {Programmering f\aa r en stadig sterkere rolle i de ulike realfagene. Dette ser vi gjennom fagfornyelsen i norsk grunn- og videreg\aa ende skole, og p\aa{} behovet i n\ae ringslivet. Universitetet i Oslo er blant de f\o rste i Norge til \aa{} innf\o re programmering som en obligatorisk del av realfagene. Siden realfaglig programmering er s\aa, er det behov for forskning p\aa{} dette feltet. I min studie har jeg fors\o kt \aa{} kartlegge hvordan biologistudenter arbeider med programmeringsoppgaver. Informantene i denne studien har v\ae rt tre grupper med studenter som tar emnet \guillemotleft Innf\o ring i beregningsorienterte modeller i biovitenskap\guillemotright{} (BIOS1100), et obligatorisk emne for alle studenter som studerer biovitenskap ved UiO. Studien har blitt gjennomf\o rt ved \aa{} bruke en kombinasjon av fokusgruppeintervju og observasjon av gruppearbeid. I tillegg har jeg anvendt et sp\o rsm\aa l i et sp\o rreskjema som ble gitt ut til alle studentene ved BIOS1100. Funnene fra denne studien viser at studentene m\o ter en rekke utfordringer n\aa r de programmerer i biovitenskapelige emner. Utfordringene er i stor grad knyttet til \aa{} lage store programmer, forst\aa{} hva som skal programmerers, bruke ulike programstrukturer og anvende matematikk. Jeg argumenterer for at mange av disse utfordringene er en konsekvens av manglende strategisk kunnskap hos studentene. I hovedsak viser studentene til to typer strategier n\aa r de programmerer; 1) bruk av eksempelprogrammer, 2) pr\o ving og feiling. Videre ser vi at biovitenskapelige problemstillinger har liten p\aa virkning p\aa{} arbeidet med \aa{} skrive programmer, men at det b\aa de kan ha positiv og negativ effekt p\aa{} studentenes ferdigheter/l\ae ring til \aa{} l\o se programmeringsoppgaver. Samtidig virker studentene \aa{} ha st\o rre interesse for programmering n\aa r de f\aa r arbeide med biovitenskapelige problemstillinger. Til slutt ser vi at studentene for det meste programmerer i grupper og at dette kan ha b\aa de positive og negative f\o lger for studentenes l\ae ring av programmering. I denne studien argumenterer jeg for at probleml\o sning b\o r vektlegges i programmeringskurs. Her kan \guillemotleft Computational thinking\guillemotright{} v\ae re en nyttig probleml\o sningsstrategi for \aa{} l\ae re studentene hvordan de bedre og mer effektivt l\o ser programmeringsoppgaver.},
  annotation = {Accepted: 2019-09-23T23:46:36Z},
  language = {nob},
  school = {Faculty of Mathematics and Natural Sciences, University of Oslo},
  thesistype = {phd},
}
