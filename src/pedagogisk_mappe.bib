
@misc{achterberg2017Software,
title           = {Software {{Carpentry}}: {{Programming}} with {{Python}}},
shorttitle      = {Software {{Carpentry}}},
author          = {Achterberg, Hakim and Adams, James and Adelman, Joshua and Allen, James and Aranda, Jorge and Bae, Sung and Banaszkiewicz, Piotr and Barmby, Pauline and Barr, Ewan and Beitey, David and Bekolay, Trevor and Berghold, Jared and Bj{\o}rnstad, Marius and Blischak, John and Boissonneault, Maxime and Bosley, Corinne and Bostroem, Azalee and Boughton, Andy and Brase, Ry4an and Brown, Amy and Brown, Kyler and Cabunoc Mayes, Abigail and Carroll, Ian and Chase, John and Childs, Stephen and Choi, Jin and Clare, Richard and Clayton, Sarah and Cock, Peter and Connell, Michael and Corvellec, Marianne and Coudrat, Thomas and Dale, Ryan and Davis, Matt and Davis, Neal and Davison, Andrew and Demichelis, Raffaella and Devenyi, Gabriel A. and Dolson, Emily and Dotson, David and Duchesne, Laurent and Duckles, Jonah and Emonet, R{\'e}mi and Endsley, K. Arthur and Fauchereau, Nicolas and Ford, Talitha and F{\"o}rstner, Konrad and Gonzalez, Ivan and Gosmann, Jan and Gosset, John and Gray, Jeremy and Greshake, Bastian and Guillou, St{\'e}phane and Haley, Mary and Hames, Sam and Hamrick, Jessica B. and Hannon, Eilis and Hansen, Michael and Hertweck, Kate and Hinsen, Konrad and Hjelm, Johan and Hodges, Toby and Howard, Derek and Irving, Damien and Jackson, Mike and Jolly, Ben and Jones, Nick and Joyce, Blake and Ketcheson, David and King, W. Trevor and Klerke, Sigrid and Ko, Lauren and Kwong, Andy and Laken, Benjamin and Lapp, Hilmar and Latornell, Doug and Leeman, John R. and Leyder, Jean-Christophe and Ligtenberg, Willem and Lin, Johnny and Lonsdale, Andrew and Manhaes Savio, Alexandre and May, Ryan and Mazur, Dan and Michonneau, Fran{\c c}ois and Mills, Bill and Mughal, Zakariyya and Nederbragt, Lex and Neufeld, Ryan and O'Leary, Aaron and Obeng, Adam and Ory, Jeramia and Osiecka, Natalia and Pipitone, Jon and Pi{\'n}ska, Adrianna and Poisot, Timoth{\'e}e and Pomorski, Pawel and Raghupathy, Narayanan and Rathgeber, Florian and Rawls, Meredith and {Richie-Halford}, Adam and Riley, Janet and Robitaille, Thomas and Rokem, Ariel and Roswell, Marjorie and Sadjadi, Mahdi and {Sales de Andrade}, Elliott and Schmeier, Sebastian and Sheneman, Leigh and Shiffer, Arron and Shkurti, Ardita and Silva, Raniere and Soranzo, Nicola and Spence, Erik and Srinath, Ashwin and Staneva, Valentina and Stapleton, Jim and Stucky, Brian and Taylor, Cody and Teal, Tracy and Telenczuk, Bartosz and Thomas, Ian and Thorne, Brian and Torres, Giovanni and Tr{\"o}ndle, Tim and Upani, Jessica and Vahtras, Olav and {van der Helm}, Edwin and Walsh, Alistair and Walter, Nathan and Weitzel, Derek and Wheeler, Daniel and White, Ethan and Williamson, Evan P. and Willmore, Frank and Wilson, Aidan and Wilson, Greg and Xiao, Xiao and Zonca, Andrea},
year            = {2017},
month           = {feb},
doi             = {10.5281/zenodo.278222},
abstract        = {A full-day introduction to programming with Python for researchers, developed and maintained by the Software Carpentry team.},
}

@misc{ahmadia2017Softwarea,
title           = {Software {{Carpentry}}: {{Version Control}} with {{Git}}},
shorttitle      = {Software {{Carpentry}}},
author          = {Ahmadia, Aron and Allen, James and Appling, Alison and Aubin, Sean and Bachant, Pete and Baird, Daniel and Banaszkiewicz, Piotr and Barmby, Pauline and Batut, B{\'e}r{\'e}nice and Bekolay, Trevor and Belkin, Maxim and Blischak, John and Bonsma, Madeleine and Borrelli, Jon and Boughton, Andy and Bouquin, Daina and Brauning, Rudi and Brett, Matthew and Brown, Amy and Cabunoc Mayes, Abigail and Charlesworth, Jane and Charlton, Billy and Chen, Daniel and Christensen, Garret and Collings, Ruth and Corvellec, Marianne and Davis, Matt and Devenyi, Gabriel A. and Dolson, Emily and Duchesne, Laurent and Duckles, Jonah and Emonet, R{\'e}mi and Est{\`e}ve, Lo{\"i}c and Farsarakis, Emmanouil and Fauber, Bennet and Fouilloux, Anne and F{\"o}rstner, Konrad and Geiger, Stuart and Gonzalez, Ivan and Guarinello, Marisa and Guillou, St{\'e}phane and Hadwin, Jamie and Haeni, Matthias and Haessig, Pierre and Hannah, Nicholas and Hansen, Michael and Harihareswara, Sumana and Heilmaier, Alois and Heroux, Martin and Hertweck, Kate and Hilboll, Andreas and Hinsen, Konrad and Huang, Daisie and Ismiraldi, Yuandra and Jackson, Mike and Jacobs, Christian and Jarecka, Dorota and Johnston, Luke W. and Jones, David and {J{\k{e}}drzejewski-Szmek}, Zbigniew and Kelly, Tom and King, W. Trevor and Kluyver, Thomas and Konrad, Bernhard and Kuzak, Mateusz and K{\"u}derle, Arne and Labrie, Kathleen and Lapp, Hilmar and Latornell, Doug and Laufersweiler, Mark and LeBauer, David and Lee, Kate and Liffers, Matthias and Llebot, Clara and Loucks, Catrina and Ma, Keith and Marwaha, Kunal and May, Ryan and Michonneau, Fran{\c c}ois and Mills, Bill and Mueller, Andreas and Munk, Madicken and Nagraj, VP and Nederbragt, Lex and {Nunez-Iglesias}, Juan and O'Brien, Brenna and O'Leary, Aaron and Olsson, Catherine and Panitz, Michael and Pawsey, Chris and Pfenninger, Stefan and Pipitone, Jon and Poisot, Timoth{\'e}e and Preney, Paul and Rice, Timothy and Riemer, Kristina and Rio Deiros, David and Robinson, Natalie and Rockenberger, Annika and Rohl, Andrew and Rokem, Ariel and Sacks, Bill and Sarahan, Michael and Schmeier, Sebastian and Schmider, Hartmut and Shellito, Peter and Shriwise, Patrick C. and Silva, Raniere and Smithyman, Brendan and Soranzo, Nicola and Steinbach, Peter and Stevens, Sarah and Stueker, Oliver and Stuermer, Benjamin and Timbers, Tiffany and Traphagen, Danielle and Tr{\"o}ndle, Tim and {van der Walt}, Anelda and Vandervalk, Steve and Watson, Greg and Weaver, Belinda and Wheelhouse, Mark and White, Ethan and Williamson, Evan P. and Wilson, Greg and Wu, Steven and Zhang, Qingpeng},
year            = {2017},
month           = {feb},
doi             = {10.5281/zenodo.278219},
abstract        = {A half-day introduction to version control with Git and GitHub for researchers, developed and maintained by the Software Carpentry team.},
}

@misc{aldazabalmensa2017Software,
title           = {Software {{Carpentry}}: {{The Unix Shell}}},
shorttitle      = {Software {{Carpentry}}},
author          = {Aldazabal Mensa, Inigo and Alexander, Harriet and Allen, James and {Alsheikh-Hussain}, Areej and Attali, Dean and Baird, Daniel and Baltzell, Asher and Banaszkiewicz, Piotr and Barmby, Pauline and Beagrie, Rob and Beane, Glen and Bedini, Andrea and Bekolay, Trevor and Belikov, Evgenij and Bell, Jason and Bill, Brian and Blin, Kai and Blischak, John and Boardman, Simon and Boissonneault, Maxime and Bonnie, Jessica and Boughton, Andy and Brase, Ry4an and Brown, Amy and Brunson, Dana and Bryk, Jarek and Buske, Orion and Cabunoc Mayes, Abigail and Carlise, Mike and Chen, Daniel and Chung, Kally and Chung, Kathy and Deveau, Daniel and Devenyi, Gabriel A. and Doehle, Phillip and Dolson, Emily and Doyle, Maria and Duckles, Jonah and Emonet, R{\'e}mi and Eyers, David and Fernandes, Filipe and Fontenelle, Hugues and Gacenga, Francis and Gardner, Paul and Gidden, Matthew and Gonzalez, Ivan and Gray, Norman and Guillou, St{\'e}phane and Hagh, Varda F. and Hansen, Michael and Harstad, Emelie and Hohenstein, Tom and Howe, Adina and Imamoglu, Fatma and Irving, Damien and Jackson, Mike and Jane McTavish, Emily and Jennings, Michael and Jones, Dan and Jones, Megan A. and Keener, Alix and Keipert, Kristopher and Kelly, Tom and Kim, Jan T. and King, W. Trevor and Koch, Christina and Konrad, Bernhard and Lake, Sherry and Lang, Dustin and Latornell, Doug and Lijnzaad, Philip and Ma, Eric and Mac, Alex and Madin, Joshua and Magle, Tobin and Mandel, Mark and Marini, Camille and Marwaha, Kunal and Mashchenko, Sergey and McCloy, Daniel and Michonneau, Fran{\c c}ois and Middleton, Ryan and Milhans, Jackie and Mills, Bill and Miotto, Amanda and Mount, Sarah and Nederbragt, Lex and Nielsen, Daiva and Nielsen, Danielle and Noga, Klemens and O'Leary, Aaron and Olson, Randy and Orr, Adam and Overgard Therkildsen, Nina and Palamartchouk, Kirill and Perry, Adam and Peterson, Matthew and Pipitone, Jon and Poisot, Timoth{\'e}e and Pourreza, Hossein and Povall, Timothy and {Richie-Halford}, Adam and Ritchie, Scott and Rocha, Cesar B. and Ross, Noam and Rydbeck, Halfdan and Sadjadi, Mahdi and Sanders, Shane and Schloss, Pat and Seyffert, Bertie and Shattow, Genevieve and Silva, Raniere and Simpkin, Sarah and Simpson, John and Smith, Byron and Sobhani, Armin and Soranzo, Nicola and Srinath, Ashwin and Standage, Daniel and Staton, Meg and Steinbach, Peter and Stimberg, Marcel and Telenczuk, Bartosz and Thoele, Florian and Timbers, Tiffany and Turner, Stephen and {van der Walt}, Anelda and {van Schyndel}, Jay and Vollmer, David and {von der Linden}, Jens and Walker, Andrew and Waterfall, Josh and Watson, Greg and White, Ethan and Williamson, Evan P. and Willing, Carol and Wilson, Greg and Winston, Donny and Wolff, Holger and Young, Lynn and Zamparo, Lee},
year            = {2017},
month           = {feb},
doi             = {10.5281/zenodo.278226},
abstract        = {A half-day introduction to automating tasks with the Unix shell for researchers, developed and maintained by the Software Carpentry team.},
}

@misc{allen2017Software,
title           = {Software {{Carpentry}}: {{Automation}} and {{Make}}},
shorttitle      = {Software {{Carpentry}}},
author          = {Allen, James and Bachant, Pete and Banaszkiewicz, Piotr and Bekolay, Trevor and Blischak, John and Boissonneault, Maxime and Boughton, Andy and Cabunoc Mayes, Abigail and Capes, Gerard and Devenyi, Gabriel A. and Digges, Deborah and Duckles, Jonah and Emonet, R{\'e}mi and Fraser, Andrew and Hansen, Michael and Hertweck, Kate and Irber, Luiz and Jackson, Mike and King, W. Trevor and Liu, Gang and Michonneau, Fran{\c c}ois and Mills, Bill and Nederbragt, Lex and O'Leary, Aaron and Pipitone, Jon and Poisot, Timoth{\'e}e and {Richie-Halford}, Adam and Sherman, Jason and Silva, Raniere and Smith, Byron and {St-Onge}, Pier-Luc and Teucher, Andy and Williamson, Evan P. and Wilson, Greg},
year            = {2017},
month           = {feb},
doi             = {10.5281/zenodo.278220},
abstract        = {A half-day introduction to task automation with Make, developed and maintained by the Software Carpentry team.},
}

@book{biggs2011Teaching,
title           = {Teaching for Quality Learning at University: What the Student Does},
shorttitle      = {Teaching for Quality Learning at University},
author          = {Biggs, John B and Tang, Catherine So-kum},
year            = {2011},
publisher       = {{McGraw-Hill/Society for Research into Higher Education ; Open University Press}},
address         = {{Philadelphia, Pa.]; Maidenhead, Berkshire, England; New York}},
abstract        = {This best-selling book explains the concept of constructive alignment in education and aids implementation of this in teaching practice.},
annotation      = {OCLC: 779842628},
isbn            = {978-0-335-24276-4},
language        = {English},
}

@article{biggs2012What,
title           = {What the Student Does: Teaching for Enhanced Learning},
shorttitle      = {What the Student Does},
author          = {Biggs, John},
year            = {2012},
month           = {feb},
volume          = {31},
pages           = {39--55},
publisher       = {{Routledge}},
issn            = {0729-4360},
doi             = {10.1080/07294360.2012.642839},
abstract        = {Many teachers see major difficulties in maintaining academic standards in today's larger and more diversified classes. The problem becomes more tractable if learning outcomes are seen as more a function of students' activities than of their fixed characteristics. The teacher's job is then to organise the teaching/learning context so that all students are more likely to use the higher order learning processes which ``academic'' students use spontaneously. This may be achieved when all components are aligned, so that objectives express the kinds of understanding that we want from students, the teaching context encourages students to undertake the learning activities likely to achieve those understandings, and the assessment tasks tell students what activities are required of them, and tell us how well the objectives have been met. Two examples of aligned teaching systems are described: problem-based learning and the learning portfolio.},
annotation      = {\_eprint: https://doi.org/10.1080/07294360.2012.642839},
journal         = {Higher Education Research \& Development},
number          = {1},
}

@inproceedings{caspersen2007Instructional,
title           = {Instructional {{Design}} of a {{Programming Course}}: {{A Learning Theoretic Approach}}},
shorttitle      = {Instructional {{Design}} of a {{Programming Course}}},
booktitle       = {Proceedings of the {{Third International Workshop}} on {{Computing Education Research}}},
author          = {Caspersen, Michael E. and Bennedsen, Jens},
year            = {2007},
pages           = {111--122},
publisher       = {{ACM}},
address         = {{New York, NY, USA}},
doi             = {10.1145/1288580.1288595},
abstract        = {We present a brief overview of a model for the human cognitive architecture and three learning theories based on this model: cognitive load theory, cognitive apprenticeship, and worked examples (a key area of cognitive skill acquisition). Based on this brief overview we argue how an introductory object-oriented programming course is designed according to results of cognitive science and educational psychology in general and cognitive load theory and cognitive skill acquisition in particular; the principal techniques applied are: worked examples, scaffolding, faded guidance, cognitive apprenticeship, and emphasis of patterns to aid schema creation and improve learning. As part of the presentation of the course, we provide a characterization of model-driven programming---the approach we have adopted in the introductory programming course. The result is an introductory programming course emphasizing a pattern-based approach to programming and schema acquisition in order to improve learning.},
isbn            = {978-1-59593-841-1},
keywords        = {cognition,cognitive apprenticeship,cognitive load theory,instructional design,learning,model-driven programming,object-oriented programming,patternbased approach to programming education,worked examples},
series          = {{{ICER}} '07},
}

@article{crouch2001Peer,
title           = {Peer {{Instruction}}: {{Ten}} Years of Experience and Results},
shorttitle      = {Peer {{Instruction}}},
author          = {Crouch, Catherine H. and Mazur, Eric},
year            = {2001},
month           = {aug},
volume          = {69},
pages           = {970--977},
issn            = {0002-9505},
doi             = {10.1119/1.1374249},
journal         = {American Journal of Physics},
number          = {9},
}

@misc{erinalisonbecker2019carpentries,
title           = {Carpentries/Instructor-Training: {{The Carpentries Instructor Training June}} 2019},
shorttitle      = {Carpentries/Instructor-Training},
author          = {Erin Alison Becker and Christina Koch and Karen Word and Rayna Michelle Harris and Maneesha Sane and Lex Nederbragt and Fran{\c c}ois Michonneau and Kari L Jordan and Amy E. Hodge and Christopher Erdmann and Ariel Rokem and Ted Laderas and Greg Wilson and Ian Lee and Murray Cadzow and Sarah Brown and Toby Hodges and Aleksandra Nenadic and Jonah Duckles and R{\'e}mi Rampin and Tracy Teal and Katrin Leinweber and Paula Andrea Martinez and R{\'e}mi Emonet and Alexander Konovalov and Eric Jankowski and Gerard Capes and Jason Williams and Katherine Koziar and Nicol{\'a}s Palopoli and Noah Spies and Allison Weber and {amoskane} and Anita Sch{\"u}rch and AnnaWilliford and {Brian Ballsun-Stanton} and Jeffrey Oliver and Mik Black and Neil Kindlon and St{\'e}phane Guillou and Yo Yehudi and Alistair John Walsh and Andrew B. Collier and Callin Switzer and Christian Brueffer and Colin Morris and Dan Allan and DanielBrett and Danielle Quinn and Darya Vanichkina and David Jennings and {davidbenncsiro} and Evan Peter Williamson and Jason M Gates and Joe Atzberger and John Bradley and John Pellman and Jonathan Bradley and Karen Cranston and {Kees den Heijer} and Laurence and {Marie-Helene Burle} and Mike Henry and {naught101} and Neal Davis and Nicholas Tierney and Petraea and Sarah M Brown and Sarah Stevens and {satya-vinay} and Sean and Serah Anne Njambi Kiburu and Stefan Helfrich and Steve Moss and Tiago M. D. Pereira},
year            = {2019},
month           = {jun},
doi             = {10.5281/zenodo.3258398},
abstract        = {A two-day introduction to modern evidence-based teaching practices, built and maintained by the Carpentry community.},
howpublished    = {Zenodo},
}

@book{fisher2013Better,
title           = {Better {{Learning Through Structured Teaching}}: {{A Framework}} for the {{Gradual Release}} of {{Responsibility}}},
shorttitle      = {Better {{Learning Through Structured Teaching}}},
author          = {Fisher, Douglas and Frey, Nancy},
year            = {2013},
month           = {dec},
publisher       = {{ASCD}},
abstract        = {In this updated 2nd edition of the ASCD best-seller, Douglas Fisher and Nancy Frey dig deeper into the hows and whys of the gradual release of responsibility instructional framework. To gradually release responsibility is to equip students with what they need to be engaged and self-directed learners. On a day-to-day level, it means delivering lessons purposefully planned to incorporate four essential and interrelated instructional phases: 1. Focused Instruction: Preparing students for learning by establishing lesson purpose, modeling strategies and skills, thinking aloud, and noticing how students respond. 2. Guided Instruction: Strategically using prompts, cues, and questions to lead students to new understanding. 3. Collaborative Learning: Allowing students to consolidate their understanding through exploration, problem-solving, discussion, and thinking with their peers. 4. Independent Learning: Requiring students to use the skills and knowledge they've acquired to create authentic products and ask new questions. The authors explore each phase, using real-life examples from a variety of disciplines. You'll find tips and tools for classroom implementation, including checklists for planning and assessment; advice on feedback, homework, group work, differentiated instruction, and blended learning; answers to frequently asked questions; and examples that align to Common Core State Standards. No matter what grade level or subject you teach, Better Learning Through Structured Teaching is your essential guide to helping students expand their capacity for successful and long-lasting learning.},
googlebooks     = {0BFRBAAAQBAJ},
isbn            = {978-1-4166-1830-0},
keywords        = {Education / General},
language        = {en},
}

@book{guzdial2015LearnerCentered,
title           = {Learner-{{Centered Design}} of {{Computing Education}}: {{Research}} on {{Computing}} for {{Everyone}}},
shorttitle      = {Learner-{{Centered Design}} of {{Computing Education}}},
author          = {Guzdial, Mark},
year            = {2015},
month           = {nov},
publisher       = {{Morgan \& Claypool}},
isbn            = {978-1-62705-351-8},
}

@phdthesis{haland2019Programmering,
title           = {{Programmering i biovitenskapelige problemstillinger}},
author          = {H{\aa}land, Lars Erik Revheim},
year            = {2019},
abstract        = {Programmering f\aa r en stadig sterkere rolle i de ulike realfagene. Dette ser vi gjennom fagfornyelsen i norsk grunn- og videreg\aa ende skole, og p\aa{} behovet i n\ae ringslivet. Universitetet i Oslo er blant de f\o rste i Norge til \aa{} innf\o re programmering som en obligatorisk del av realfagene. Siden realfaglig programmering er s\aa, er det behov for forskning p\aa{} dette feltet. I min studie har jeg fors\o kt \aa{} kartlegge hvordan biologistudenter arbeider med programmeringsoppgaver. Informantene i denne studien har v\ae rt tre grupper med studenter som tar emnet \guillemotleft Innf\o ring i beregningsorienterte modeller i biovitenskap\guillemotright{} (BIOS1100), et obligatorisk emne for alle studenter som studerer biovitenskap ved UiO. Studien har blitt gjennomf\o rt ved \aa{} bruke en kombinasjon av fokusgruppeintervju og observasjon av gruppearbeid. I tillegg har jeg anvendt et sp\o rsm\aa l i et sp\o rreskjema som ble gitt ut til alle studentene ved BIOS1100. Funnene fra denne studien viser at studentene m\o ter en rekke utfordringer n\aa r de programmerer i biovitenskapelige emner. Utfordringene er i stor grad knyttet til \aa{} lage store programmer, forst\aa{} hva som skal programmerers, bruke ulike programstrukturer og anvende matematikk. Jeg argumenterer for at mange av disse utfordringene er en konsekvens av manglende strategisk kunnskap hos studentene. I hovedsak viser studentene til to typer strategier n\aa r de programmerer; 1) bruk av eksempelprogrammer, 2) pr\o ving og feiling. Videre ser vi at biovitenskapelige problemstillinger har liten p\aa virkning p\aa{} arbeidet med \aa{} skrive programmer, men at det b\aa de kan ha positiv og negativ effekt p\aa{} studentenes ferdigheter/l\ae ring til \aa{} l\o se programmeringsoppgaver. Samtidig virker studentene \aa{} ha st\o rre interesse for programmering n\aa r de f\aa r arbeide med biovitenskapelige problemstillinger. Til slutt ser vi at studentene for det meste programmerer i grupper og at dette kan ha b\aa de positive og negative f\o lger for studentenes l\ae ring av programmering. I denne studien argumenterer jeg for at probleml\o sning b\o r vektlegges i programmeringskurs. Her kan \guillemotleft Computational thinking\guillemotright{} v\ae re en nyttig probleml\o sningsstrategi for \aa{} l\ae re studentene hvordan de bedre og mer effektivt l\o ser programmeringsoppgaver.},
annotation      = {Accepted: 2019-09-23T23:46:36Z},
language        = {nob},
school          = {University of Oslo},
}

@inproceedings{jenkins2002difficulty,
title           = {On the Difficulty of Learning to Program},
booktitle       = {Proceedings for the 3rd {{Annual}} Conference of the {{LTSN Centre}} for {{Information}} and {{Computer Sciences}}},
author          = {Jenkins, Tony},
year            = {2002},
pages           = {53--58},
publisher       = {{Loughborough University}},
abstract        = {Few students find learning to program easy. This paper considers why this is so by examining what makes this most basic of skills so difficult to acquire. There are many factors at work. Some are simply inherent in the subject while others have more to do with the modus operandi of teaching departments. Others are deeply interlinked with the expectations, attitudes, and previous experiences of the teaching staff and their students. If computing educators are ever to truly develop a learning environment where all the students learn to program quickly and well, it is vital that an understanding of the difficulties and complexities faced by the students is developed. At the moment the way in which programming is taught and learned is fundamentally broken.},
}

@inproceedings{luxton-reilly2016Learning,
title           = {Learning to {{Program}} Is {{Easy}}},
booktitle       = {Proceedings of the 2016 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
author          = {{Luxton-Reilly}, Andrew},
year            = {2016},
pages           = {284--289},
publisher       = {{ACM}},
address         = {{New York, NY, USA}},
doi             = {10.1145/2899415.2899432},
abstract        = {The orthodox view that "programming is difficult to learn" leads to uncritical teaching practices and poor student outcomes. It may also impact negatively on diversity and equity within the Computer Science discipline. But learning to program is easy --- so easy that children can do it. We make our introductory courses difficult by establishing unrealistic expectations for novice programming students. By revisiting the expected norms for introductory programming we may be able to substantially improve outcomes for novice programmers, address negative impressions of disciplinary practices and create a more equitable environment.},
isbn            = {978-1-4503-4231-5},
keywords        = {computer science education,cs1,curriculum,expectations,learning outcomes,novice,programming,standards},
series          = {{{ITiCSE}} '16},
}

@book{mazur1997Peer,
title           = {Peer Instruction: A User's Manual},
shorttitle      = {Peer Instruction},
author          = {Mazur, Eric},
year            = {1997},
publisher       = {{Prentice Hall}},
address         = {{Upper Saddle River, N.J.}},
abstract        = {Mazur shows teachers how to teach students of physics that they can understand memorization as a different alternative to mathematics. He describes interactive teaching, including different types of lecturing and group study, as a method of teaching physics.},
annotation      = {OCLC: 34788471},
isbn            = {978-0-13-565441-5},
language        = {English},
}

@article{miller1956magical,
title           = {The Magical Number Seven, plus or Minus Two: Some Limits on Our Capacity for Processing Information.},
author          = {Miller, George A.},
year            = {1956},
volume          = {63},
pages           = {81--97},
publisher       = {{American Psychological Association}},
address         = {{US}},
issn            = {1939-1471(Electronic),0033-295X(Print)},
doi             = {10.1037/h0043158},
abstract        = {A variety of researches are examined from the standpoint of information theory. It is shown that the unaided observer is severely limited in terms of the amount of information he can receive, process, and remember. However, it is shown that by the use of various techniques, e.g., use of several stimulus dimensions, recoding, and various mnemonic devices, this informational bottleneck can be broken. 20 references. (PsycINFO Database Record (c) 2016 APA, all rights reserved)},
journal         = {Psychological Review},
keywords        = {*Cognitive Processes,Information Theory},
number          = {2},
}

@article{nederbragt2020Ten,
title           = {Ten Quick Tips for Teaching with Participatory Live Coding},
author          = {Nederbragt, Alexander and Harris, Rayna Michelle and Hill, Alison Presmanes and Wilson, Greg},
year            = {2020},
month           = {sep},
volume          = {16},
pages           = {e1008090},
publisher       = {{Public Library of Science}},
issn            = {1553-7358},
doi             = {10.1371/journal.pcbi.1008090},
journal         = {PLOS Computational Biology},
keywords        = {Computer software,Eyes,Human learning,Instructors,Learning,Personal computers,Textbooks,Workshops},
language        = {en},
number          = {9},
}

@article{robins2003Learning,
title           = {Learning and {{Teaching Programming}}: {{A Review}} and {{Discussion}}},
shorttitle      = {Learning and {{Teaching Programming}}},
author          = {Robins, Anthony and Rountree, Janet and Rountree, Nathan},
year            = {2003},
month           = {jun},
volume          = {13},
pages           = {137--172},
issn            = {0899-3408},
doi             = {10.1076/csed.13.2.137.14200},
abstract        = {In this paper we review the literature relating to the psychological/educational study of programming. We identify general trends comparing novice and expert programmers, programming knowledge and strategies, program generation and comprehension, and object-oriented versus procedural programming. (We do not cover research relating specifically to other programming styles.) The main focus of the review is on novice programming and topics relating to novice teaching and learning. Various problems experienced by novices are identified, including issues relating to basic program design, to algorithmic complexity in certain language features, to the ``fragility'' of novice knowledge, and so on. We summarise this material and suggest some practical implications for teachers. We suggest that a key issue that emerges is the distinction between effective and ineffective novices. What characterises effective novices? Is it possible to identify the specific deficits of ineffective novices and help them to become effective learners of programming?},
journal         = {Computer Science Education},
number          = {2},
}

@article{sweller2019Cognitive,
title           = {Cognitive {{Architecture}} and {{Instructional Design}}: 20~{{Years Later}}},
shorttitle      = {Cognitive {{Architecture}} and {{Instructional Design}}},
author          = {Sweller, John and {van Merri{\"e}nboer}, Jeroen J. G. and Paas, Fred},
year            = {2019},
month           = {jan},
issn            = {1573-336X},
doi             = {10.1007/s10648-019-09465-5},
abstract        = {Cognitive load theory was introduced in the 1980s as an instructional design theory based on several uncontroversial aspects of human cognitive architecture. Our knowledge of many of the characteristics of working memory, long-term memory and the relations between them had been well-established for many decades prior to the introduction of the theory. Curiously, this knowledge had had a limited impact on the field of instructional design with most instructional design recommendations proceeding as though working memory and long-term memory did not exist. In contrast, cognitive load theory emphasised that all novel information first is processed by a capacity and duration limited working memory and then stored in an unlimited long-term memory for later use. Once information is stored in long-term memory, the capacity and duration limits of working memory disappear transforming our ability to function. By the late 1990s, sufficient data had been collected using the theory to warrant an extended analysis resulting in the publication of Sweller et al. (Educational Psychology Review, 10, 251\textendash 296, 1998). Extensive further theoretical and empirical work have been carried out since that time and this paper is an attempt to summarise the last 20 years of cognitive load theory and to sketch directions for future research.},
journal         = {Educational Psychology Review},
keywords        = {Cognitive load theory,Instructional advances,Theoretical developments},
language        = {en},
}

@misc{wilson2017Data,
title           = {Data {{Carpentry Wrangling Genomics Lesson}}},
author          = {Wilson, Greg and Becker, Erin and McKay, Sheldon and Michonneau, Fran{\c c}ois and Williams, Jason J and Mayes, Abigail Cabunoc and Silva, Raniere and (hoytpr), Pete and Crosby, Kate and Nederbragt, Lex and {NielInfante} and Psomopoulos, Fotis E. and Gourl{\'e}, Hadrien and (gaiusjaugustus), Gaius and {dbmarchant} and Emonet, R{\'e}mi and Cock, Peter and Banaszkiewicz, Piotr and Teal, Tracy and {HLindsay} and Thomas, Adam and Hamm, Chris and Allen, James and Jordan, Kari L and {EvanWill} and Belkin, Maxim and Pipitone, Jon and Young, Nick and Tang, Ming and Paudel, Dev and {synesthesiam} and Mills, Bill and Devenyi, Gabriel A. and Carroll, Ian and King, Trevor W. and {gtehennepe}},
year            = {2017},
month           = {nov},
doi             = {10.5281/zenodo.1064254},
}


