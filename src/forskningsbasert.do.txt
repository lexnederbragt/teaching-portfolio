# #ifdef NOTES

## Forskning om undervisning, læring og vurdering har
## informert utforming og gjennomføring av tiltak for å styrke undervisningskvalitet.
## Vitenskapelige fremgangsmåter er brukt for å samle inn,
## dokumentere og analysere undervisning og/eller studentenes læring.

* hva vil jeg at studentene skal gjøre med forksning jeg presenterer
* bruk av forsking: Parson's problem, peer instruction, constructive alignment, labelled subgoals
* master prosjekter
 * transdisciplinær veiledningsteam!

# #endif

===== Bruk av resultater fra forsning om læring i undervisningen =====

Å lære å programmere anses generelt som vanskelig
cite{jenkins2002difficulty} cite{robins2003Learning}
cite{guzdial2015LearnerCentered}.
For et motargument
(og et utmerket sammendrag av forskningen som støtter denne posisjonen),
se imidlertid cite{luxton-reilly2016Learning}.
Å lære et programmeringsspråk er litt som å lære et nytt skriftspråk:
man må ikke bare lære seg syntaksen,
men også hvordan man kombinerer ord for å gi meningsfulle setninger (‘grammatikken’).
Når man programmerer fører feil ofte til feilmeldinger som
ikke er skrevet for nybegynnere (Denny et al., 2014).
Kode som kjører, men som ikke gir forventet eller korrekt resultat, dvs.
har ‘bugs’, er vanskelig å rette -
feilsøking er en ferdighet i seg selv (McCauley et al., 2008).
Å be en student om å 'skrive et dataprogram som gjør X' fra bunnen av,
krever mange ferdigheter samtidig:
å vite hvilke kodingskonstruksjoner og datastrukturer som skal brukes,
å kunne bruke syntaksen for dataprogrammeringsspråk,
å kunne designe og teste programmet,
og sørger for at løsningen faktisk løser problemet som blir adressert (dvs. 'X'),
for et problem som kan kreve kunnskap fra et bestemt domene
(f.eks. biologi når det gjelder BIOS1100-studentene mine).
Det er trygt å si at det er lett å komme til en situasjon
hvor mengden informasjon som må behandles samtidig
er for mye for en nybegynner å takle.
Læring å programmere fører med andre ord raskt til det som i kognitiv psykologi
kalles høy kognitiv last.


Teorien om Kognitiv Last er

!bquote
A set of learning principles that deals with the optimal usage of the working memory -- Caspersen and Bennedsen, 2007
!equote

Denne teorien, som definert i en nylig review av emnet cite{sweller2019Cognitive},
"aims to explain how the information processing load induced by learning tasks can affect students’ ability to process new information and to construct knowledge in long-term memory"
Teorien hevder at den begrensede kapasiteten til arbeidsminnet
begrenser sterkt hvor mye ny informasjon som kan behandles til enhver tid.
Når det blir spurt for mye fra dette arbeidsminnet,
er det en risiko for å overbelaste det, noe som hindrer læring.
Overbelastning av arbeidsminne forhindrer at ny kunnskap overføres effektivt
til langtidsminne, noe som kreves for læring.
Det hevdes at instruksjonsmetoder må ta disse grensene i betraktning.

Selv om få studier måler kognitiv belastning under læring av hvordan man
programmerer direkte (f.eks. Morrison et al., 2014),
prøver mange å utvikle inngrep som reduserer kognitiv belastning,
og gjør forskning for å påvise eventuelle effekten av ingrepene.

Jeg har brukt en del av disse resultater for å forbedre utbytte
for mine studenter når de lærer seg programmering i BIOS1100.

_Worked examples_

"Worked examples provide a full problem solution that learners must carefully study"
cite{sweller2019Cognitive}.
Worked examples kan betraktes som en form for læring fra eksempler.
Når løsningen på et problem er utarbeidet ved demonstrasjon,
blir studentene bedt om å løse lignende problemer selv.
Basert på begrenset eksisterende forskning om emnet, (Skudder og Luxton-Reilly, 2014)
fokuserer jeg på to typer bearbeidede eksempler:
* eksempel-problem-par, hvor hvert utarbeidede eksempel er parret med et
 lignende problem for studentene å løse umiddelbart etterpå
* "faded working examples", der etter å ha presentert en utarbeidet komplett løsning på et problem,
 blir det presentert problemer med flere trinn som studentene blir bedt om å løse,
 og slutter med et problem som studentene fullt ut skal løse

_Parsons problems_
En annen viktig type oppgave jeg bruker er såkalte "Parsons problemer".
Disse innbærer å tilby et komplett program,
men med randomisert rekkefølgen på linjene (instruksjonene),
eventuelt supplert med noen unødvendige kodelinjer for å løse problemet
(Parsons og Haden, 2006).


===== Forskning på egen undervisning =====

Det nye bachelor studieprogrammet Biovitenskap,
som startet høsten 2017, er unik i at det integrerer programmering i hele studieløpet.
Første semester møter studentene BIOS1100 som gir en innføring
i å lage og eksperimentere med enkle modeller av biologiske systemer.

Det er per dags dato lite forskningsbasert kunnskap om
hvordan biologistudenter stiller seg til programmering i biologi
og enda mindre hvilke læringsstrategier de bruker
for å løse biologiske problemstillinger med programmering.

Som et første steg i å samle kunnskap på dett området har vi hatt fire
lektorstudenter som tar en undervisningsrettet master
til å skrive sin oppgave om studenter som tar BIOS1100.

Formålet med disse prosjektetene har vært
å undersøke studenters holdninger og motivasjon for programmering og modellering i biologi,
samt finne ut hvordan studentene velger å løse ulike biologiske problemstillinger ved hjelp av programmering.
Gjennom prosjektet har vi ønsket å bidra til bedre læring og motivasjon i beregningsorientert biologi.

Jeg har vært medveileder for alle fire studenter.
Veiledningsteamet har vært tverrflaglig,
med utdanningsforskere fra fysisk institutt,
og undervisere fra skolelaboratoriet ved Institutt for Biologi
og meg som emneansvarlig i BIOS1100.

Funnene i masterprosjekter har jeg brukt aktivt for å forbedre kurset,
både faglig og hvordan emnet undervises.

I tillegg har dette arbeidet blitt presentert på MNT konferansen
i 2019 og 2021

## FIXME hva slags kongferanse er dette+

og har det blitt skrevet en vitenskapelig artikkel

## FIXME legg til tittel og lenke

Nedenfor gjøres kort rede for prosjektene, funnene, og hvordan
disse har blitt intergrert i videreutvikling av BIOS1100.

=== June Edvarda Eliassen 2020 ===

* tittel: Biologistudenters motivasjon for beregningsorientert biologi etter innføring av krav om full fordypning i realfaglig matematikk
* problemstlling: Hvordan var motivasjonen hos studentene for programmering og modellering i biologi etter innføring av krav om full fordypning i realfaglig matematikk?
* lenke til oppgaven: URL: "http://urn.nb.no/URN:NBN:no-82918"
* metode: spørreskjema som ble delt ut første og siste forelesning
* teoretisk rammeverk: Eccels’ forventningsverdi teori om prestasjonsorienterte valg;
  Hidi og Renningers fire-fasemodell for interesseutvikling;
  Banduras mestringsforventningsteori

Kort sammendrag:

Studien fokuserte på eventuelle effekter krav om full fordypning
av realfaglig matematikk (R2-kravet) har hatt
på motivasjonen for programmering og modellering i biologi hos studentene
som tok emnet hosten 2019.
Data fra sporreundersokelsene fra hostsemesteret 2019 ble analysert og sammenlignet
med data (*før* R2-kravet) fra Marthe Mjøen Berg sin studie fra 2018.
Resultatene indikerer at matematikk R2 ser ut til a henge sammen med
storre mestringsforventning og storre interesse for BIOS1100.
På den andre siden ser det ut som om mange av studentene
valgte bort full fordypning i biologi til fordel for R2.
Funnene støtter antagelsen om at nytteverdi er den sterkeste motiverende faktoren for emne.
Nytteverdien må ses i lys av at emne er obligatorisk for studieprogramet,
og at studenter eller har lite interesse for programmering og modellering i biologi.

Anbefaling for BIOS1100:

* Å spille på relevansen for å skape større interesse for programmering og modellering i biologi

I 2020 ble blant annet dette implemenert da vi tok i bruk data
fra den pågående korona pandemien for å modellere sykdomsutbrudd.

=== Sofie Rudberg 2020 ===

* tittel: Relevansen av kompetansen fra matematikk R2 i beregningsorientert biologi
* problemstlling: Hvordan gjør kompetansen fra R2 seg gjeldende i problemløsningsstrategier hos studenter i arbeid med beregningsorientert biologi?
* lenke til oppgaven: URL: "http://urn.nb.no/URN:NBN:no-82936"
* metode: observasjoner av studentene i situasjoner med oppgaveløsning, og intervju
* teoretisk rammeverk: Computational thinking, mathematical thinking


Kort sammendrag:

Studentene er stort sett positive til at det har blitt R2-krav på utdanningen,
og anser de strategiske kunnskapene fra matematikken som relevante.
Studentene benytter seg av problemløsningsstrategier kjent fra matematikk
og computational thinking.
Studentene har derimot utfordringer med å løse mer sammensatte oppgaver,
og benytter seg ikke av problemløsningsstrategiene kjent fra matematikk og computational thinking når de arbeider med mer tradisjonell biologi
i molekylær og cellebiologifaget BIOS1110, som de tar samtidig med BISO1100.

Anbefalinger for BIOS1100:

* Kompetansen fra matematikk R2 er relevant for studentene på biovitenskap,
  men undervisningen bør legge opp til mer trening innen ulike problemløsningsstrategier

I 2020 ble det brukt en del tid på å gi studentene en forståelse av
at det er nyttig å ha en strategi for å løse problemer i faget.
Dette er fortsatt et forbedringspunkt i kurset.

=== Marthe Mjøen Berg 2019 ===

* tittel: Studentar si interesse og meistringsforventning for programmering og modellering i biologi
* problemstlling: Kva kjenneteiknar studentar si interesse og meistringsforventning for programmering og modellering i biologi?
* lenke til oppgaven: URL: "http://urn.nb.no/URN:NBN:no-73633"
* metode: spørreskjema som ble delt ut første og siste forelesning
* teoretisk rammeverk: Eccels’ forventningsverdi teori om prestasjonsorienterte valg;
  Hidi og Renningers fire-fasemodell for interesseutvikling;
  Banduras mestringsforventningsteori

Kort sammendrag:

Funna viser at studentmassen hovudsakleg består av studentar på biovitenskap som har vald studie sitt av interesse for biologi. Det er flest kvinnelege studentar, og studentane er lite interesserte i programmering og modellering i biologi. Mange av studentane har biologi frå vidaregåande, nokre har Matematikk R2, men dei har generelt lite programmeringserfaring. Desse tidlegare erfaringane visar seg også att i kva studentane opplever som utfordrande i BIOS1100. Vidare har vi sett at studentane gjennom semesteret får noko høgre meistringsforventning til BIOS1100, medan interessa for emnet går litt ned. Til samanlikning, har studentane høgre meistringsforventning og interesseverdi for studieprogrammet sitt, enn for BIOS1100. Det viser seg også at mennene har høgre interesse og meistringsforventning enn kvinnene i emnet. Kjønnsskilnaden er ikkje-eksisterande når det kjem til studieprogrammet. Den tydlege skilnaden i studentane sin motivasjon for studieprogrammet og BIOS1100 ser ein i fleire delar av datamaterialet; blant anna grunngjev studentane årsak for val av studieprogram gjennom ein indre motivasjon, medan BIOS1100 blir rapportert som nyttig og obligatorisk. Sett skilnaden mellom studieprogrammet og BIOS1100, samt mellom kjønna, har eg diskutert kring behovet for ekstra fagleg støtte. Dette for å kompensere for manglande interesse og meistringsforventning.

=== Lars Erik Håland 2019 ===

* tittel: Studenters arbeid med programmering i biovitenskapelige problemstillinger. En kvalitativ studie av biologistudenters arbeid med Python
* problemstilling: Hvordan arbeider studenter når de programmerer i introduksjonskurs i biologi?
* lenke til oppgaven: URL: "http://urn.nb.no/URN:NBN:no-73632"
* metode: observasjoner av studentene i situasjoner med oppgaveløsning, og intervju
* teoretisk rammeverk: Computational Thinking


Kort sammendrag:

Første spørsmålet omhandlet hvilke utfordringer studentene møtte når de programmerte. De funnene jeg har viser at studentene opplever de samme typer utfordringer som man ser i andre introduksjonskurs i programmering. Studentene har vist at det er utfordrende å skrive store programmer og at de sliter med å finne ut hva programmeringsoppgavene krever av dem. Arbeidet med å skrive selve programmet har også vist seg å by på flere utfordringer hos studentene. I stor grad handler dette om at studentene mangler konseptuelle kunnskaper, noe som fører til at de er usikre på hvilke programstrukturer de skal bruke, hvordan strukturene virker og hvordan de setter sammen hele programmet. Videre byr matematikken på utfordringer hos studentene. Her opplever studentene at matematikken ligger på et nivå de ikke behersker og deres forkunnskaper i matematikk skaper utfordringer for dem i BIOS1100. Studentene opplever også en del typer feilmeldinger når de programmerer, men det virker ikke som en stor utfordring for dem.
Når det kommer til studentenes strategiske kunnskaper, så virker disse å være nokså svake. Innenfor modellen til Shute et al. (2017) ser vi at studentene bruker få strategier når de programmerer. Det er i stor grad to strategier studentene bruker. Den ene er bruk av eksempelprogrammer og den andre er prøv- og feil-strategier. Jeg har i denne oppgaven argumentert for at å bruk av eksempelprogrammer ikke er negativt i seg selv, men at det blir ineffektivt for studentens arbeid når dette blir en dominerende strategi. Begge strategiene virker å være en kompensasjon for mangelen av mer effektive strategier og det er mye som tyder på at studentenes utfordringer henger sammen med deres mangelfulle strategiske kunnskaper.
Det tredje spørsmålet har sett på hvordan biovitenskapelige spørsmål påvirker studentens programmering. Gjennom denne studien har jeg sett at det biologifaglige ikke påvirker studentens arbeid med å skrive selve programmet. Derimot virker det å ha positivt effekt på deres evne til å løse programmeringsoppgaver, siden studentene får en pekepinn på hva svaret
i oppgaven skal bli. Samtidig gjør det oppgaven vanskeligere, fordi det krever at de både må bruke biologi- og programmeringskunnskaper. Bruk av biovitenskapelige oppgaver fører også til at programmeringen blir mer interessant for de fleste studentene.
Til sist har jeg sett på hvordan studentene arbeider i BIOS1100. Her har jeg sett at de nesten ikke arbeider med programmering på egenhånd, men at de jobber mest i grupper. Dette skyldes at det er vanskelig å programmere på egenhånd og jeg anser det derfor som viktig å tilrettelegge for mer individuelt arbeid i emnet.
Programmering begynner å sette sitt merke på den realfaglige utdanningen. På Universitet i Oslo er programmering allerede godt etablert i mange av realfagene og nå blir det også en del av matematikk og naturfag i norsk grunn- og videregående skole. Samtidig er programmering i realfaglig utdanning et ungt fagfelt og det er lite vitenskapelig konsensus om hvordan realfaglig programmering bør undervises. Jeg har i min studie avdekket en rekke utfordringer hos studenter som programmerer i biologi. Noen er generelle for programmering, mens andre kan relateres til det biologifaglige. Mange av utfordringene ser ut til å være en konsekvens av studentenes mangelfulle programmerings- og problemløsningsstrategier. Dette er viktige funn fordi vi som lærere og professorer må ta hensyn til studentenes forutsetninger og utfordringer når vi utdanner dem i programmering.
